{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"gpuType":"T4","authorship_tag":"ABX9TyO3HA9iuRVrIZzTJyl+DX0J"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["#In this book we're going to cover some of the most fundamental concepts of tensors using Tensorflow\n","\n","More specificly, we're going to cover:\n","* Introduction to tensors\n","* Getting information from tensors\n","* Manuplating Tensors\n","* Tensors and Numpy\n","* Using @tf.function (a way to speed up your regular python functions)\n","* Using GPU's with tensorflows\n","* Exercises to try yourself"],"metadata":{"id":"7ZmM5uqXXR-X"}},{"cell_type":"markdown","source":["## Introduction to Tensors"],"metadata":{"id":"JcSp4vu-X7d8"}},{"cell_type":"code","source":["# Import tensorflow\n","import tensorflow as tf\n","print(tf.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n-f2My21YtYM","executionInfo":{"status":"ok","timestamp":1701678614944,"user_tz":-330,"elapsed":3543,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"f7c0c9c7-e1a3-44b8-bc42-3ad0b56dcae1"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["2.14.0\n"]}]},{"cell_type":"code","source":["# Creating tensors using tf.constant()\n","scalar = tf.constant(7)\n","scalar"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rmBnEq2oY_dQ","executionInfo":{"status":"ok","timestamp":1701678614944,"user_tz":-330,"elapsed":29,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"958cd890-c4d6-4c97-b5ca-e568cc27e823"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int32, numpy=7>"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["# Check the no.of dimensions of a tensor\n","scalar.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TZN1vuxbZiUT","executionInfo":{"status":"ok","timestamp":1701678614945,"user_tz":-330,"elapsed":25,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"d3788261-89bc-43ce-bfaf-d7e284ab1d0a"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["# Create a vector\n","vector = tf.constant([10,10])\n","vector"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PiCoaEDhZ5Xx","executionInfo":{"status":"ok","timestamp":1701678614945,"user_tz":-330,"elapsed":20,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"ffef39a2-7a56-4f1f-de2b-fa33bf578267"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2,), dtype=int32, numpy=array([10, 10], dtype=int32)>"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["vector.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BgW5Nfk_aEUG","executionInfo":{"status":"ok","timestamp":1701678614945,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"d431f15a-918e-4ecf-e44c-a0877047f169"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Create a matrix (has more than one dimension)\n","matrix = tf.constant([[10,7],\n","                      [7,10]])\n","matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"08Kzx3X7aInk","executionInfo":{"status":"ok","timestamp":1701678614945,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"38af5213-ef10-42c4-a64b-264871488109"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[10,  7],\n","       [ 7, 10]], dtype=int32)>"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["matrix.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kscXbYMDafF-","executionInfo":{"status":"ok","timestamp":1701678890685,"user_tz":-330,"elapsed":1821,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"ccb5caca-2fea-4cdc-ac4f-44f1ddc9e4fc"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["\n","\n","# Create a another matrix\n","another_matrix = tf.constant([[10.,7.],\n","                              [3.,2.],\n","                              [8.,9.]], dtype=tf.float16)"],"metadata":{"id":"xKapZVnSainr","executionInfo":{"status":"ok","timestamp":1701678891803,"user_tz":-330,"elapsed":36,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["another_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EqQH5K43bKsG","executionInfo":{"status":"ok","timestamp":1701678891804,"user_tz":-330,"elapsed":36,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"eab586ff-6f81-4088-ebf5-4c612484ba22"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=float16, numpy=\n","array([[10.,  7.],\n","       [ 3.,  2.],\n","       [ 8.,  9.]], dtype=float16)>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["another_matrix.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"29PDnWembXhN","executionInfo":{"status":"ok","timestamp":1701678892487,"user_tz":-330,"elapsed":27,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a92df7e2-98e3-4055-a3d9-2b80711ea186"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["### Creating the tensor with `tf.varible`"],"metadata":{"id":"XLWeJluUbv0m"}},{"cell_type":"code","source":["# Creating the same tensor with tf.varible()\n","changable_tensor = tf.Variable([10,7])\n","unchangeable_tensor = tf.constant([10,7])\n","changable_tensor, unchangeable_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ooNES6ecsdqC","executionInfo":{"status":"ok","timestamp":1701678892488,"user_tz":-330,"elapsed":26,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"e5fe540e-cd38-4a20-9b1c-599079f9b8f9"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Variable 'Variable:0' shape=(2,) dtype=int32, numpy=array([10,  7], dtype=int32)>,\n"," <tf.Tensor: shape=(2,), dtype=int32, numpy=array([10,  7], dtype=int32)>)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# Let's try change one of the elements in our changeable tensor\n","changable_tensor[0].assign(7)\n","changable_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XcRgY6CBtEWx","executionInfo":{"status":"ok","timestamp":1701678892488,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"66e3f3b1-f48a-4ce9-ba6d-f54b44934f93"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'Variable:0' shape=(2,) dtype=int32, numpy=array([7, 7], dtype=int32)>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Let's to change our unchangeable tensor\n","unchangeable_tensor[0].assign(7)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":349},"id":"m_5LcDgCt64J","executionInfo":{"status":"error","timestamp":1701678892488,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"da0c01dc-af7c-41e3-8255-edca0883b064"},"execution_count":13,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-8d45d3602c5a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Let's to change our unchangeable tensor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0munchangeable_tensor\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/tensor.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    259\u001b[0m         \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_enable_numpy_behavior\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    260\u001b[0m       \"\"\")\n\u001b[0;32m--> 261\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    262\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'tensorflow.python.framework.ops.EagerTensor' object has no attribute 'assign'"]}]},{"cell_type":"markdown","source":["### Creating random tensors\n","\n","Random tensors are tensors of some arbitay size which contain random numbers"],"metadata":{"id":"fS41NoUqunoi"}},{"cell_type":"code","source":["# Creating two random (but the same) tensors\n","random_1 = tf.random.Generator.from_seed(42)  # set seed for reproducibility\n","random_1 = random_1.normal(shape=(3,2))\n","random_2 = tf.random.Generator.from_seed(42)\n","random_2 = random_2.normal(shape=(3,2))\n","\n","random_1 == random_2"],"metadata":{"id":"ZGQatZEPH3H5","executionInfo":{"status":"aborted","timestamp":1701678892489,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["random_3 = tf.random.normal(shape=(3,2))\n","random_3"],"metadata":{"id":"M4egZJBjJx0b","executionInfo":{"status":"aborted","timestamp":1701678892489,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Shuffle the order of elements in a tensor"],"metadata":{"id":"AcImOz6KKwpp"}},{"cell_type":"code","source":["# Shuffle a tensor (valuable for when you want to shuffle your data so the inherit order doesn't effect learning)\n","not_shuffled = tf.constant([[10,7],\n","                            [3,4],\n","                            [2,5]])\n","# Shuffle our non-shuffled tensor\n","tf.random.set_seed(42) # Global level random seed\n","tf.random.shuffle(not_shuffled, seed=42) # Operation level random seed"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q25x0zpoLm1Z","executionInfo":{"status":"ok","timestamp":1701678892489,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"01560f52-441c-4f2d-e5d9-f94ee3a443e7"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=int32, numpy=\n","array([[10,  7],\n","       [ 3,  4],\n","       [ 2,  5]], dtype=int32)>"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["### Other ways to make tensors"],"metadata":{"id":"U2atnmn8OHN7"}},{"cell_type":"code","source":["# Create a tensorof all ones\n","tf.ones([10,7])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sGaCtcztPFpm","executionInfo":{"status":"ok","timestamp":1701678893023,"user_tz":-330,"elapsed":551,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"c6249c4f-e277-461a-f904-b44026cecafa"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(10, 7), dtype=float32, numpy=\n","array([[1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.]], dtype=float32)>"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# Create a tensor of all zeros\n","tf.zeros(shape=(3,4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0laZ0BbkR8vH","executionInfo":{"status":"ok","timestamp":1701678893024,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"d28c366e-a63d-4224-dbb7-7466036a4ece"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 4), dtype=float32, numpy=\n","array([[0., 0., 0., 0.],\n","       [0., 0., 0., 0.],\n","       [0., 0., 0., 0.]], dtype=float32)>"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["### Turn Numpy arrays into tensors\n","The main difference between Numpy arrays and TensorFlow tensors is what tensors can be run on a GPU (much faster for numerical computing)"],"metadata":{"id":"EkgjwjM_SgCF"}},{"cell_type":"code","source":["# You cal also turn numpy arrays into Tensors\n","import numpy as np\n","numpy_A = np.arange(1,25, dtype=np.int32)\n","numpy_A"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wAiKT5USSENw","executionInfo":{"status":"ok","timestamp":1701678893757,"user_tz":-330,"elapsed":738,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"22f420cc-f32b-4c23-d884-c999510234c0"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19, 20, 21, 22, 23, 24], dtype=int32)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["A = tf.constant(numpy_A,shape = (2,3,4))\n","B = tf.constant(numpy_A)\n","A ,B"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6D_E_IfwTWQE","executionInfo":{"status":"ok","timestamp":1701678893757,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"7c0011a0-e559-4d16-b6b3-f8ef251164fd"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(2, 3, 4), dtype=int32, numpy=\n"," array([[[ 1,  2,  3,  4],\n","         [ 5,  6,  7,  8],\n","         [ 9, 10, 11, 12]],\n"," \n","        [[13, 14, 15, 16],\n","         [17, 18, 19, 20],\n","         [21, 22, 23, 24]]], dtype=int32)>,\n"," <tf.Tensor: shape=(24,), dtype=int32, numpy=\n"," array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","        18, 19, 20, 21, 22, 23, 24], dtype=int32)>)"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["### Getting information from tensors\n","\n","When dealing with tensors you probably want to aware of the following attributes\n","* Shape\n","* Rank\n","* Axis or dimension\n","* Size"],"metadata":{"id":"g6s78tjiTiem"}},{"cell_type":"code","source":["# Create a rank 4 tensor\n","rank_4_tensor = tf.zeros(shape=(2,3,4,5))\n","rank_4_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kN-i5mzaVAHf","executionInfo":{"status":"ok","timestamp":1701678893757,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"e439b24b-0992-4a6c-d2e5-b8c84a3ebe03"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=\n","array([[[[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]]],\n","\n","\n","       [[[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]]]], dtype=float32)>"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["rank_4_tensor[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HH38ztsoU_t-","executionInfo":{"status":"ok","timestamp":1701678894275,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a92815b1-f177-4495-a700-1418e5f76f87"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 4, 5), dtype=float32, numpy=\n","array([[[0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.]],\n","\n","       [[0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.]],\n","\n","       [[0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.],\n","        [0., 0., 0., 0., 0.]]], dtype=float32)>"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["rank_4_tensor.shape, rank_4_tensor.ndim, tf.size(rank_4_tensor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0VSpkDH8U_ea","executionInfo":{"status":"ok","timestamp":1701678894276,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"47df4df9-3cce-4ece-d1ac-22292005efe6"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([2, 3, 4, 5]), 4, <tf.Tensor: shape=(), dtype=int32, numpy=120>)"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":[" # Getting various attributes of our tensors\n"," print(\"Datatype of every element:\", rank_4_tensor.dtype)\n"," print(\"No.Of dimensions (rank):\", rank_4_tensor.ndim)\n"," print(\"Shape of tensor:\", rank_4_tensor.shape)\n"," print(\"Elements along the 0 axis:\", rank_4_tensor.shape[0])\n"," print(\"Elements along the last axis:\", rank_4_tensor.shape[-1])\n"," print(\"Total no.of elements in our tensor:\", tf.size(rank_4_tensor).numpy())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NIUh3tuzXMVe","executionInfo":{"status":"ok","timestamp":1701678894874,"user_tz":-330,"elapsed":10,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"4a4ebefb-6c5f-4b1f-b7eb-0697b307948a"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Datatype of every element: <dtype: 'float32'>\n","No.Of dimensions (rank): 4\n","Shape of tensor: (2, 3, 4, 5)\n","Elements along the 0 axis: 2\n","Elements along the last axis: 5\n","Total no.of elements in our tensor: 120\n"]}]},{"cell_type":"markdown","source":["### Indexing tensors\n","Tensors can be indexed just like Python lists."],"metadata":{"id":"vRycSZImYl8E"}},{"cell_type":"code","source":["# Get the first two elements of each dimension\n","rank_4_tensor[:2, :2, :2, :2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nngfhDLUZuDI","executionInfo":{"status":"ok","timestamp":1701678895400,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"1a548209-b4a0-4360-e31b-b81b36f8ff5d"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2, 2, 2), dtype=float32, numpy=\n","array([[[[0., 0.],\n","         [0., 0.]],\n","\n","        [[0., 0.],\n","         [0., 0.]]],\n","\n","\n","       [[[0., 0.],\n","         [0., 0.]],\n","\n","        [[0., 0.],\n","         [0., 0.]]]], dtype=float32)>"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Get the first element from each dimension from each index execept the final one\n","rank_4_tensor[:1, :1, :1,]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MkNrTOMQZ_DZ","executionInfo":{"status":"ok","timestamp":1701678895897,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"f15f78ad-753b-423b-ef90-3f741070bfe8"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 1, 1, 5), dtype=float32, numpy=array([[[[0., 0., 0., 0., 0.]]]], dtype=float32)>"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["# Create a rank 2 tensor\n","rank_2_tensor = tf.constant([[10,7],\n","                             [3,4]])\n","rank_2_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yr6MJlb5asAx","executionInfo":{"status":"ok","timestamp":1701678895897,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"acf3ef67-0fdf-4eef-9deb-0549db694416"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[10,  7],\n","       [ 3,  4]], dtype=int32)>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Get the last item of each of row of our rank 2 tensor\n","rank_2_tensor[:,-1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TyXF7A-ca5u2","executionInfo":{"status":"ok","timestamp":1701678896506,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"b6cce9ce-7915-4faa-feaf-aade29046271"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2,), dtype=int32, numpy=array([7, 4], dtype=int32)>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# Add in extra dimension to our rank 2 tensor\n","rank_3_tensor = rank_2_tensor[..., tf.newaxis]\n","rank_3_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kPb-b7pjbpVI","executionInfo":{"status":"ok","timestamp":1701678896506,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"62348829-3d3a-431d-ddfc-df1e50795ebb"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2, 1), dtype=int32, numpy=\n","array([[[10],\n","        [ 7]],\n","\n","       [[ 3],\n","        [ 4]]], dtype=int32)>"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Altenate to tf.newaxis\n","tf.expand_dims(rank_2_tensor, axis=-1) # \"-1\" means expand the final axis\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YQb3-CYPcHQd","executionInfo":{"status":"ok","timestamp":1701678897076,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"69a418e4-1b3c-43c9-a3c6-c5dbca396b0d"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2, 1), dtype=int32, numpy=\n","array([[[10],\n","        [ 7]],\n","\n","       [[ 3],\n","        [ 4]]], dtype=int32)>"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["tf.expand_dims(rank_2_tensor, axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EwYTU90XdC9D","executionInfo":{"status":"ok","timestamp":1701678897076,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"140d31ef-20b8-4b58-ab07-1e46bc573ac8"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 1, 2), dtype=int32, numpy=\n","array([[[10,  7]],\n","\n","       [[ 3,  4]]], dtype=int32)>"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["### MAnuplating tensors (tensors operations)\n","\n","** BAsic operations**\n","\n","`+`, `-`, `*`, `/`"],"metadata":{"id":"JBP6gaA5dE_x"}},{"cell_type":"code","source":["# You can add values to a tensor using the addition operator\n","tensor = tf.constant([[10,7],[3,4]])\n","tensor + 10"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-DVeFPDOeXLm","executionInfo":{"status":"ok","timestamp":1701678897473,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a88ea269-3e24-49a3-adaa-55d01bfa80dd"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[20, 17],\n","       [13, 14]], dtype=int32)>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# Original tensor is not changed\n","tensor = tensor + 10\n","tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JVH_3lyqes0f","executionInfo":{"status":"ok","timestamp":1701678897850,"user_tz":-330,"elapsed":10,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"5a283f41-43a5-419f-87b9-545533181b63"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[20, 17],\n","       [13, 14]], dtype=int32)>"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# Multiplication\n","tensor * 10"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mQKlgorbfAXA","executionInfo":{"status":"ok","timestamp":1701678898397,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"654f1a5b-7bf6-4535-a233-6e1095f94cb0"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[200, 170],\n","       [130, 140]], dtype=int32)>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# Substraction\n","tensor - 10"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LLo8hcwifLud","executionInfo":{"status":"ok","timestamp":1701678898397,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"9b220d23-480f-471a-bf4a-901ef57f787d"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[10,  7],\n","       [ 3,  4]], dtype=int32)>"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["# We can use the tensorflow built in functions\n","tf.multiply(tensor,10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lrf_UYQtfOkj","executionInfo":{"status":"ok","timestamp":1701678899170,"user_tz":-330,"elapsed":781,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"addb9ddc-b12f-4d64-f07f-8f935a38b4a0"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[200, 170],\n","       [130, 140]], dtype=int32)>"]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","source":["**Matrix Multiplication**\n","\n","In machine learning, matrix multiplication is one of the most common tensor operations.\n","\n","There are two rules our tensors (or matrices) need to fullfill to multiply\n","\n","1. The inner dimensions must match\n","2. The resulting matrix has the shape of outer dimensions"],"metadata":{"id":"RLG9-qtyfdVr"}},{"cell_type":"code","source":["# Matrix multiplication in tensor flow\n","tf.matmul(tensor, tensor)"],"metadata":{"id":"taGg-27uf5X3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701678899679,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a84c877b-3b2d-4536-dbad-8e91913e0690"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[621, 578],\n","       [442, 417]], dtype=int32)>"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W978FUWN-krK","executionInfo":{"status":"ok","timestamp":1701678900173,"user_tz":-330,"elapsed":20,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"e457bcaf-de18-4524-d4a4-fd799f62ec4a"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[20, 17],\n","       [13, 14]], dtype=int32)>"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["# Matrix multiplication with python operator \"@\"\n","tensor @ tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yHRuT6QG-v6a","executionInfo":{"status":"ok","timestamp":1701678900173,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"fd39c268-b3f3-4e20-e134-d02cb5e4b163"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[621, 578],\n","       [442, 417]], dtype=int32)>"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["tensor.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h2R8poxP_CZa","executionInfo":{"status":"ok","timestamp":1701678900661,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"51c6cc23-3413-4454-abc7-ead2c801714a"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([2, 2])"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["# Create a tensor of (3,2)\n","X= tf.constant([[1,2],\n","                [3,4],\n","                [5,6]])\n","# Create another (3,2)\n","Y= tf.constant([[7,8],\n","                [9,10],\n","                [11,12]])\n","X, Y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dTiHM0zR_GRi","executionInfo":{"status":"ok","timestamp":1701678900661,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"cdbbceb5-1f21-4526-b03b-bdbf138e7f33"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(3, 2), dtype=int32, numpy=\n"," array([[1, 2],\n","        [3, 4],\n","        [5, 6]], dtype=int32)>,\n"," <tf.Tensor: shape=(3, 2), dtype=int32, numpy=\n"," array([[ 7,  8],\n","        [ 9, 10],\n","        [11, 12]], dtype=int32)>)"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["X @ Y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"id":"-OjV3SB5_iyc","executionInfo":{"status":"error","timestamp":1701678901092,"user_tz":-330,"elapsed":32,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"24438e9f-a09f-4e1b-9b4b-f2c417cc250a"},"execution_count":40,"outputs":[{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-7db1014e61e3>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36mraise_from_not_ok_status\u001b[0;34m(e, name)\u001b[0m\n\u001b[1;32m   5886\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mNoReturn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5887\u001b[0m   \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\" name: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5888\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5889\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: {{function_node __wrapped__MatMul_device_/job:localhost/replica:0/task:0/device:CPU:0}} Matrix size-incompatible: In[0]: [3,2], In[1]: [3,2] [Op:MatMul] name: "]}]},{"cell_type":"code","source":["tf.matmul(X, Y)"],"metadata":{"id":"jLVZTgJs_5eB","executionInfo":{"status":"aborted","timestamp":1701678901093,"user_tz":-330,"elapsed":30,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Let's change shape of y\n","tf.reshape(Y, shape=(2,3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vj-54x-1_6x8","executionInfo":{"status":"ok","timestamp":1701678902823,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a1e0d061-8d0e-4425-a474-fff43aef1552"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 3), dtype=int32, numpy=\n","array([[ 7,  8,  9],\n","       [10, 11, 12]], dtype=int32)>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["# Try to multiply X by reshaped Y\n","X @ tf.reshape(Y, shape=(2,3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DHmjqvOPDBfb","executionInfo":{"status":"ok","timestamp":1701678903401,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"eccfcf2f-522d-4044-8cdc-9fa53cd21ef1"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 3), dtype=int32, numpy=\n","array([[ 27,  30,  33],\n","       [ 61,  68,  75],\n","       [ 95, 106, 117]], dtype=int32)>"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["tf.matmul(X, tf.reshape(Y, shape=(2,3)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZDKZ5pPoDQjk","executionInfo":{"status":"ok","timestamp":1701678904048,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"5633d054-463f-4e21-d4e5-fc6b8f2b6fd7"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 3), dtype=int32, numpy=\n","array([[ 27,  30,  33],\n","       [ 61,  68,  75],\n","       [ 95, 106, 117]], dtype=int32)>"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# Try change the shape of X instead of Y\n","tf.matmul(tf.reshape(X, shape=(2,3)),Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aMJJtMbvDX3A","executionInfo":{"status":"ok","timestamp":1701678905028,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"ac30da70-d4cc-4692-ef54-84cabb1b9367"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[ 58,  64],\n","       [139, 154]], dtype=int32)>"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["# Can do the same with the tranpose\n","tf.transpose(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4J4XWoOcDlFF","executionInfo":{"status":"ok","timestamp":1701678905028,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a38b5bbf-31a6-4adb-a13c-a44cda46607a"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 3), dtype=int32, numpy=\n","array([[1, 3, 5],\n","       [2, 4, 6]], dtype=int32)>"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["X, tf.transpose(X), tf.reshape(X, shape=(2,3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qMcpHliBFMOl","executionInfo":{"status":"ok","timestamp":1701678905778,"user_tz":-330,"elapsed":26,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"beb3f027-24d7-4688-c084-91053fdad7c8"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(3, 2), dtype=int32, numpy=\n"," array([[1, 2],\n","        [3, 4],\n","        [5, 6]], dtype=int32)>,\n"," <tf.Tensor: shape=(2, 3), dtype=int32, numpy=\n"," array([[1, 3, 5],\n","        [2, 4, 6]], dtype=int32)>,\n"," <tf.Tensor: shape=(2, 3), dtype=int32, numpy=\n"," array([[1, 2, 3],\n","        [4, 5, 6]], dtype=int32)>)"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["# Try matrix multiplication with the transpose\n","tf.matmul(tf.transpose(X), Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hhSDKKufFRHE","executionInfo":{"status":"ok","timestamp":1701678905778,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"662a2928-77f7-4fc5-e50c-64108d622c98"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[ 89,  98],\n","       [116, 128]], dtype=int32)>"]},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["**Dot Product**\n","\n","Matrix multiplication also refered as dot product\n","\n","You can also perform matrix multiplication using:\n","\n","* `tf.matmul()`\n","* `tf.tensordot()`\n","* `@`\n","\n"],"metadata":{"id":"eA1yWSlDGCez"}},{"cell_type":"code","source":["# Perform the dot product on X and Y (requires X and Y to be transposed)\n","tf.tensordot(X, tf.reshape(Y, shape=(2,3)), axes = 1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QAc_76KCHIh_","executionInfo":{"status":"ok","timestamp":1701678906234,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"2e7051df-2a2b-4a14-ccc3-22d78bcc2804"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 3), dtype=int32, numpy=\n","array([[ 27,  30,  33],\n","       [ 61,  68,  75],\n","       [ 95, 106, 117]], dtype=int32)>"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["# Perform matrix multiplication between X and Y(transposed)\n","tf.matmul(X, tf.transpose(Y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nj1mPktyT4VH","executionInfo":{"status":"ok","timestamp":1701678906741,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"19fabb44-a4d8-4b08-955b-4c286d63b71c"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 3), dtype=int32, numpy=\n","array([[ 23,  29,  35],\n","       [ 53,  67,  81],\n","       [ 83, 105, 127]], dtype=int32)>"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["# Perform matrix multiplication between X and Y(reshaped)\n","tf.matmul(X, tf.reshape(Y, shape=(2,3)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dZJW1k8aU_Jm","executionInfo":{"status":"ok","timestamp":1701678906742,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"604293d3-5725-472f-93d2-c401f269f348"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 3), dtype=int32, numpy=\n","array([[ 27,  30,  33],\n","       [ 61,  68,  75],\n","       [ 95, 106, 117]], dtype=int32)>"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["# Check the values of values of Y, transposed Y, reshaped Y\n","print(\"Normal Y:\\n\", Y)\n","print(\"Transposed Y:\\n\", tf.transpose(Y))\n","print(\"Reshaped Y:\\n\", tf.reshape(Y, shape=(2,3)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lwP0r2EZVIQz","executionInfo":{"status":"ok","timestamp":1701678907190,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"44d43596-0c9f-449a-a6be-bc946a4d75ad"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Normal Y:\n"," tf.Tensor(\n","[[ 7  8]\n"," [ 9 10]\n"," [11 12]], shape=(3, 2), dtype=int32)\n","Transposed Y:\n"," tf.Tensor(\n","[[ 7  9 11]\n"," [ 8 10 12]], shape=(2, 3), dtype=int32)\n","Reshaped Y:\n"," tf.Tensor(\n","[[ 7  8  9]\n"," [10 11 12]], shape=(2, 3), dtype=int32)\n"]}]},{"cell_type":"markdown","source":["### Changing datatype of a tensor"],"metadata":{"id":"J01Y4Q-8VvgL"}},{"cell_type":"code","source":["# Create a new tensor with default datatype (float32)\n","B = tf.constant([1.7,7.4])\n","B.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CbNFxC2kqeCg","executionInfo":{"status":"ok","timestamp":1701678907770,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"2a01ad3e-ebb3-423d-f68d-e22921f6170d"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tf.float32"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["C = tf.constant([7,10])"],"metadata":{"id":"oLmgWVFZsb84","executionInfo":{"status":"ok","timestamp":1701678908330,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["# Let's change float32 to float16 (reduced precision)\n","B = tf.cast(B, dtype=tf.float16)\n","B.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4i8-lI5-qvnn","executionInfo":{"status":"ok","timestamp":1701678908330,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"8449c2b2-19c9-4153-ace1-c4e231ccfec3"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tf.float16"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["# Change from int32 to float32\n","E =tf.cast(C, dtype=tf.float32)\n","E"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s8pVIdmRr1Be","executionInfo":{"status":"ok","timestamp":1701678909108,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"5f392539-c1aa-489f-b920-99f0d313b98a"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2,), dtype=float32, numpy=array([ 7., 10.], dtype=float32)>"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["E_float16 = tf.cast(E, dtype=tf.float16)"],"metadata":{"id":"zb9NR0CWsW1b","executionInfo":{"status":"ok","timestamp":1701678909109,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}}},"execution_count":56,"outputs":[]},{"cell_type":"markdown","source":["### Aggregating tensors\n","\n","Aggregation tensors = condensing them from multiple values down to a smaller amount of values"],"metadata":{"id":"fKVQMIbvstAU"}},{"cell_type":"code","source":["# Getting the absolute values\n","D = tf.constant([-7,-10])\n","D"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0GYhlZtbsyRL","executionInfo":{"status":"ok","timestamp":1701678909616,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"2a711489-f5c4-49ae-c8eb-c18aa5848343"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2,), dtype=int32, numpy=array([ -7, -10], dtype=int32)>"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["# Get the absolute values\n","tf.abs(D)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RyruXXItuhQ2","executionInfo":{"status":"ok","timestamp":1701678909616,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"05d97f83-4ecc-4339-f246-1ccefc3dbdce"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2,), dtype=int32, numpy=array([ 7, 10], dtype=int32)>"]},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","source":["Let's go to the following forms of aggregation\n","* Get the minimum\n","* Get the maximum\n","* Get the mean of the tensor\n","* Get the sum of the tensor\n"],"metadata":{"id":"WqkJxp0iuqEz"}},{"cell_type":"code","source":["# Creting the random tensor with values between 0 and 100  if size 50\n","E =tf.constant(np.random.randint(0,100, size = 50))\n","E"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NHg4i_GYvO17","executionInfo":{"status":"ok","timestamp":1701678910015,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"c6219be3-3251-4f81-842d-056741abf979"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(50,), dtype=int64, numpy=\n","array([23, 54, 28, 40, 78, 57, 10, 72, 77, 36, 97, 84, 59, 32, 63, 77, 20,\n","       42, 56, 60, 81, 60,  8, 50, 42, 86, 69, 27, 52, 36, 71, 67, 29, 17,\n","       64, 50, 39, 28, 86,  2, 51,  6, 53, 75, 79, 30, 94, 19, 32, 52])>"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["tf.size(E), E.shape, E.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_cxPg4GVvmdp","executionInfo":{"status":"ok","timestamp":1701678910478,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"c836b7c5-bc45-482d-afa7-cebe2048e5cc"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(), dtype=int32, numpy=50>, TensorShape([50]), 1)"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["# Find the minimum\n","tf.reduce_min(E)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TNoKNtEnvstO","executionInfo":{"status":"ok","timestamp":1701678911566,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"684fe11f-2e46-4cf4-d89a-174f1ddfc5d4"},"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=2>"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["# Find the maximum\n","tf.reduce_max(E)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"33IodnL5v33D","executionInfo":{"status":"ok","timestamp":1701678911566,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"4dc33035-64d3-40f4-9bd4-c8deedbdb27e"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=97>"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["# Find the mean\n","tf.reduce_mean(E)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"krlLfXSjwAf3","executionInfo":{"status":"ok","timestamp":1701678911567,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"73b88742-ccc3-4827-afea-da32b2509a80"},"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=50>"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["# Find the sum\n","tf.reduce_sum(E)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0QIUGgLlwF-o","executionInfo":{"status":"ok","timestamp":1701678912293,"user_tz":-330,"elapsed":9,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"eefe568c-9e62-41a1-ec18-356b75c71d17"},"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=2520>"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["# To find the variance of our tensor, we need access to tensorflow_probability\n","import tensorflow_probability as tfp"],"metadata":{"id":"J3DL_IdHxyzv","executionInfo":{"status":"ok","timestamp":1701678912744,"user_tz":-330,"elapsed":459,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","source":["# Find the varience\n","tfp.stats.variance(E)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RmhpT2ePwJpt","executionInfo":{"status":"ok","timestamp":1701678912745,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"93065bb9-bd44-4f1d-80a4-180a6c2b2356"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=598>"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["# Find the standard deviation\n","tf.math.reduce_std(tf.cast(E,dtype=tf.float32))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oNOpJrJAwjKp","executionInfo":{"status":"ok","timestamp":1701678913117,"user_tz":-330,"elapsed":379,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"60a642ad-6d67-4400-ab37-e4b4af9e9e32"},"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=24.455673>"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["tf.math.reduce_variance(tf.cast(E,dtype=tf.float32))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xFq6Vaqr0PEi","executionInfo":{"status":"ok","timestamp":1701678913118,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"b9266374-4259-4e40-bd87-b0dfdd205807"},"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=598.07996>"]},"metadata":{},"execution_count":68}]},{"cell_type":"markdown","source":["### Find the positional maximum and minimum\n","\n"],"metadata":{"id":"m7JyE3Gmybp_"}},{"cell_type":"code","source":["# Create a new tensor for finding positional minimum and maximum\n","tf.random.set_seed(42)\n","F = tf.random.uniform(shape=[50])\n","F"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JphjZshV0crk","executionInfo":{"status":"ok","timestamp":1701678913819,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a47e6347-aa8e-4c39-9537-ab381d9a296c"},"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(50,), dtype=float32, numpy=\n","array([0.6645621 , 0.44100678, 0.3528825 , 0.46448255, 0.03366041,\n","       0.68467236, 0.74011743, 0.8724445 , 0.22632635, 0.22319686,\n","       0.3103881 , 0.7223358 , 0.13318717, 0.5480639 , 0.5746088 ,\n","       0.8996835 , 0.00946367, 0.5212307 , 0.6345445 , 0.1993283 ,\n","       0.72942245, 0.54583454, 0.10756552, 0.6767061 , 0.6602763 ,\n","       0.33695042, 0.60141766, 0.21062577, 0.8527372 , 0.44062173,\n","       0.9485276 , 0.23752594, 0.81179297, 0.5263394 , 0.494308  ,\n","       0.21612847, 0.8457197 , 0.8718841 , 0.3083862 , 0.6868038 ,\n","       0.23764038, 0.7817228 , 0.9671384 , 0.06870162, 0.79873943,\n","       0.66028714, 0.5871513 , 0.16461694, 0.7381023 , 0.32054043],\n","      dtype=float32)>"]},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["# Find the positioal maximum\n","tf.argmax(F)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X-wv_a7f0coC","executionInfo":{"status":"ok","timestamp":1701678913819,"user_tz":-330,"elapsed":9,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"7ef32faf-0034-453c-caa0-21d4da4ede79"},"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=42>"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["# Index on our largest value position\n","F[tf.argmax(F)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BeSGV7LU0ckq","executionInfo":{"status":"ok","timestamp":1701678914429,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"f7a129d6-0e00-4ae6-b672-3bb3f55f511a"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.9671384>"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["tf.reduce_max(F)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DTuV6bZe1-Py","executionInfo":{"status":"ok","timestamp":1701678914931,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"7c33e28c-d0f0-4b2e-80c4-4e63b538a042"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.9671384>"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["F[tf.argmax(F)] == tf.reduce_max(F)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lrkg5h4L2Ra-","executionInfo":{"status":"ok","timestamp":1701678914931,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"156568a9-7c78-45e3-9d45-660ac692048c"},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=bool, numpy=True>"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["# Find the postinal minimum\n","tf.argmin(F)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZNLaHve42b98","executionInfo":{"status":"ok","timestamp":1701678915563,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"b7b7aefd-8fd7-4e52-ea47-90151d7bf887"},"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=16>"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["# Find the minimum using the positional minimum index\n","F[tf.argmin(F)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-6cTsvmj2v_d","executionInfo":{"status":"ok","timestamp":1701678915563,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"1c1324d0-29b3-46a7-b84a-8dfc66a3140c"},"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.009463668>"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["tf.reduce_min(F)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xp1_Vx0O264k","executionInfo":{"status":"ok","timestamp":1701678915563,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"0276aa34-e67c-4343-a2d4-508b30a6c563"},"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.009463668>"]},"metadata":{},"execution_count":76}]},{"cell_type":"markdown","source":["### Squeezing a tensor ( removing all single dimensions)"],"metadata":{"id":"LmbIQhjL2-VJ"}},{"cell_type":"code","source":["# Create a tensor\n","tf.random.set_seed(42)\n","G= tf.constant(tf.random.uniform(shape=[50]), shape=[1,1,1,50])\n","G"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yjyIgmln-z3t","executionInfo":{"status":"ok","timestamp":1701679319711,"user_tz":-330,"elapsed":784,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"219a4e58-f3ef-40bc-c755-4b7c56ea6393"},"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 1, 1, 50), dtype=float32, numpy=\n","array([[[[0.6645621 , 0.44100678, 0.3528825 , 0.46448255, 0.03366041,\n","          0.68467236, 0.74011743, 0.8724445 , 0.22632635, 0.22319686,\n","          0.3103881 , 0.7223358 , 0.13318717, 0.5480639 , 0.5746088 ,\n","          0.8996835 , 0.00946367, 0.5212307 , 0.6345445 , 0.1993283 ,\n","          0.72942245, 0.54583454, 0.10756552, 0.6767061 , 0.6602763 ,\n","          0.33695042, 0.60141766, 0.21062577, 0.8527372 , 0.44062173,\n","          0.9485276 , 0.23752594, 0.81179297, 0.5263394 , 0.494308  ,\n","          0.21612847, 0.8457197 , 0.8718841 , 0.3083862 , 0.6868038 ,\n","          0.23764038, 0.7817228 , 0.9671384 , 0.06870162, 0.79873943,\n","          0.66028714, 0.5871513 , 0.16461694, 0.7381023 , 0.32054043]]]],\n","      dtype=float32)>"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["# Squeezing - removing all single dimensions from a tensor\n","G_squeezed = tf.squeeze(G)\n","G_squeezed"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"97-s2DSA_T9g","executionInfo":{"status":"ok","timestamp":1701679444083,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a82c97eb-c535-4b8d-ff76-7151e11e890a"},"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(50,), dtype=float32, numpy=\n","array([0.6645621 , 0.44100678, 0.3528825 , 0.46448255, 0.03366041,\n","       0.68467236, 0.74011743, 0.8724445 , 0.22632635, 0.22319686,\n","       0.3103881 , 0.7223358 , 0.13318717, 0.5480639 , 0.5746088 ,\n","       0.8996835 , 0.00946367, 0.5212307 , 0.6345445 , 0.1993283 ,\n","       0.72942245, 0.54583454, 0.10756552, 0.6767061 , 0.6602763 ,\n","       0.33695042, 0.60141766, 0.21062577, 0.8527372 , 0.44062173,\n","       0.9485276 , 0.23752594, 0.81179297, 0.5263394 , 0.494308  ,\n","       0.21612847, 0.8457197 , 0.8718841 , 0.3083862 , 0.6868038 ,\n","       0.23764038, 0.7817228 , 0.9671384 , 0.06870162, 0.79873943,\n","       0.66028714, 0.5871513 , 0.16461694, 0.7381023 , 0.32054043],\n","      dtype=float32)>"]},"metadata":{},"execution_count":84}]},{"cell_type":"markdown","source":["### One hot encoding tensors"],"metadata":{"id":"RB2qD87w_wJ5"}},{"cell_type":"code","source":["# Create a list of indices\n","some_list = [0, 1, 2, 3] # could be red, green, blue, purple\n","\n","# One hot encoden our list of indices\n","tf.one_hot(some_list, depth=4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xWf7eF_ZBgQY","executionInfo":{"status":"ok","timestamp":1701679998490,"user_tz":-330,"elapsed":10,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"d72658fa-26b4-40e8-a4da-2651d398c61f"},"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(4, 4), dtype=float32, numpy=\n","array([[1., 0., 0., 0.],\n","       [0., 1., 0., 0.],\n","       [0., 0., 1., 0.],\n","       [0., 0., 0., 1.]], dtype=float32)>"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["# Specifying custom values for one hot encoding\n","tf.one_hot(some_list, depth=4, on_value = \"I love You\", off_value= \"I hate You\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8mfPHV7-CCEx","executionInfo":{"status":"ok","timestamp":1701680158583,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"e12f8897-2b11-41c2-a946-c90de0b7ebfc"},"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(4, 4), dtype=string, numpy=\n","array([[b'I love You', b'I hate You', b'I hate You', b'I hate You'],\n","       [b'I hate You', b'I love You', b'I hate You', b'I hate You'],\n","       [b'I hate You', b'I hate You', b'I love You', b'I hate You'],\n","       [b'I hate You', b'I hate You', b'I hate You', b'I love You']],\n","      dtype=object)>"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","source":["### Squaring, log, square root"],"metadata":{"id":"Nm18KJQ9CFmF"}},{"cell_type":"code","source":["# Create a new tensor\n","H = tf.range(1,10)\n","H"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q4sgMOlPCFik","executionInfo":{"status":"ok","timestamp":1701680513995,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"e1fe3792-ba19-41ff-b747-2f08c6acb64d"},"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(9,), dtype=int32, numpy=array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int32)>"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["# Square it\n","tf.square(H)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Ew7vLp9D_Fh","executionInfo":{"status":"ok","timestamp":1701680523928,"user_tz":-330,"elapsed":389,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"dd2a829f-330f-421c-8e89-6eaebe0285be"},"execution_count":89,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(9,), dtype=int32, numpy=array([ 1,  4,  9, 16, 25, 36, 49, 64, 81], dtype=int32)>"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","source":["# Square root\n","tf.sqrt(tf.cast(H, dtype=tf.float32))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aKAvTzJbECRP","executionInfo":{"status":"ok","timestamp":1701680946406,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"f5f23251-4e0b-4354-8102-1ace82d661d7"},"execution_count":96,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(9,), dtype=float32, numpy=\n","array([1.       , 1.4142135, 1.7320508, 2.       , 2.236068 , 2.4494898,\n","       2.6457512, 2.828427 , 3.       ], dtype=float32)>"]},"metadata":{},"execution_count":96}]},{"cell_type":"code","source":["# Find the log\n","tf.math.log(tf.cast(H, dtype= tf.float32))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SsmbKnn8EL_7","executionInfo":{"status":"ok","timestamp":1701680695663,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"93ac18be-69dd-4621-cdbc-ba178d2d41e2"},"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(9,), dtype=float32, numpy=\n","array([0.       , 0.6931472, 1.0986123, 1.3862944, 1.609438 , 1.7917595,\n","       1.9459102, 2.0794415, 2.1972246], dtype=float32)>"]},"metadata":{},"execution_count":94}]},{"cell_type":"markdown","source":["### Tensors and numpy\n","\n","Tensorflow interacts beautifully with Numpy arrays"],"metadata":{"id":"75APolS_Ehsq"}},{"cell_type":"code","source":["# Create a tensor directly from numpy array\n","J = tf.constant(np.array([3., 7., 10.]))\n","J"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LUjnu88_Fxvd","executionInfo":{"status":"ok","timestamp":1701681132234,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"671d570c-2dcb-4075-83da-7a8c077e40c6"},"execution_count":98,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3,), dtype=float64, numpy=array([ 3.,  7., 10.])>"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["# Convert tensor to numpy array\n","np.array(J), type(np.array(J))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W8NQxA_CFxsE","executionInfo":{"status":"ok","timestamp":1701681185760,"user_tz":-330,"elapsed":427,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"b5249441-da80-4ef3-aa53-70eda3801687"},"execution_count":99,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 3.,  7., 10.]), numpy.ndarray)"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["# Convert tensor to numpy array\n","J.numpy(), type(J.numpy())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3RR6OC9wGj1P","executionInfo":{"status":"ok","timestamp":1701681251701,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a13ff2a1-87ed-4d34-b54e-290f0c424d28"},"execution_count":100,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 3.,  7., 10.]), numpy.ndarray)"]},"metadata":{},"execution_count":100}]},{"cell_type":"code","source":["# The default types of each are slightly different\n","numpy_J = tf.constant(np.array([ 3.,  7., 10.]))\n","tensor_J = tf.constant([ 3.,  7., 10.])\n","numpy_J.dtype, tensor_J.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lfxXHqBaG0Eh","executionInfo":{"status":"ok","timestamp":1701681435507,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"a9f1fda2-fa8a-41df-fc8a-19ecac8ed9c0"},"execution_count":102,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tf.float64, tf.float32)"]},"metadata":{},"execution_count":102}]},{"cell_type":"markdown","source":["### Finding acees to GPU's"],"metadata":{"id":"7mzGmjBFHVSl"}},{"cell_type":"code","source":["import tensorflow as tf\n","tf.config.list_physical_devices(\"GPU\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"759Zsr_TJE4X","executionInfo":{"status":"ok","timestamp":1701682085129,"user_tz":-330,"elapsed":6975,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"22d41bb6-8bc4-4c6c-fb4e-8177580ba392"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0JQj6AajJMsX","executionInfo":{"status":"ok","timestamp":1701682150809,"user_tz":-330,"elapsed":357,"user":{"displayName":"Sai sri sumanth","userId":"09063692487084182763"}},"outputId":"cf2f9276-ba0b-4e52-c78a-2c2f40e5ba59"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Dec  4 09:29:10 2023       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 525.105.17   Driver Version: 525.105.17   CUDA Version: 12.0     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   37C    P8     9W /  70W |      3MiB / 15360MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"s7hsy4LwKJ7w"},"execution_count":null,"outputs":[]}]}